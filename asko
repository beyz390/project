import java.util.Random;//for shuffling

public class Deck {

    public static int Colorfulcards = 40;//constant of 40 cards
    public Card[] deck;// deck array
    public int currentIndex;
public Card[] medeck;
    public Card[] scarydeck;

    public Deck() { // creates the deck object
        deck = new Card[Colorfulcards]; //creates array deck and fills it with instances of card class.Size of this array is determined by Colorfulcards.
        currentIndex = 0;//firstly it is 0 later to be incremented in drawCard method
        createDeck();//calls the createDeck method
        shuffleDeck();//calls the shuffleDeck method
        ptt();
}
 private void createDeck() { //adding colorful to the deck array , adding cards with values for each color
        int size = 0;
        for (int i = 1; i <= 10; i++) {
            deck[size++] = new Card("Green", i);
            deck[size++] = new Card("Blue", i);
            deck[size++] = new Card("Red", i);
            deck[size++] = new Card("Yellow", i);
        }
    }

    private void shuffleDeck() { //fisher-yates shuffle algorithm
        Random random = new Random();
        for (int i = Colorfulcards - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            Card temp = deck[index];
            deck[index] = deck[i];
            deck[i] = temp;
        }
    }
  public void ptt(){
        shuffleDeck();
        for(int i =0;i<5;i++){
            scarydeck[i]= gamedeck[i];
            medeck[i] =gamedeck [Colorfulcards - 1 - i];
        }
        currentIndex += 10;

    }
public Card drawCard() {
    if (currentIndex >= Colorfulcards) {
        System.out.println("Deck is empty. No cards to draw.");
        return null;
    }

    Card drawnCard = deck[currentIndex];
    currentIndex++;
    return drawnCard;
}


    public boolean isEmpty() { //checks if the deck is empty or not by currentIndex
        return currentIndex >= Colorfulcards;
    }
}
 public void playGame() {

        // Repeat the following 5 times
        for (int turn = 0; turn < 5; turn++) {
            // The card at the top is given to the computer
            Card computerCard = drawCard();
            System.out.println("Computer draws: " + computerCard);

            // The card at the bottom is given to the user
            Card userCard = medeck[medeck.length - 1];
            System.out.println("User draws: " + userCard);

            // Additional logic for generating random cards
            generateRandomCards();

            // Display player decks after drawing cards
            displayPlayerDecks();

            // Logic for player's turn
            playerTurn();
        }
    }
    private void generateRandomCards() {
        // Generate three cards with random colors and values between 1 to 6, with a random sign
        for (int i = 0; i < 3; i++) {
            int randomValue = new Random().nextInt(6) + 1;
            String randomColor = getRandomColor();
            String randomSign = getRandomSign();
            Card randomCard = new Card(randomColor, randomValue, randomSign);
            medeck[i] = randomCard;
        }

        // Generate two cards with 80% chance of being signed cards
        for (int i = 3; i < 5; i++) {
            if (new Random().nextDouble() <= 0.8) {
                String randomSign = getRandomSign();
                Card signedCard = new Card(null, 0, randomSign);
                medeck[i] = signedCard;
            }
        }

        // Shuffle the player decks after adding new cards
        shufflePlayerDecks();
    }

    private String getRandomColor() {
        String[] colors = {"Yellow", "Blue", "Red", "Green"};
        return colors[new Random().nextInt(colors.length)];
    }

    private String getRandomSign() {
        String[] signs = {"+", "-"};
        return signs[new Random().nextInt(signs.length)];
    }

    private void shufflePlayerDecks() {
        Random random = new Random();
        for (int i = medeck.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            Card temp = medeck[index];
            medeck[index] = medeck[i];
            medeck[i] = temp;
        }
    }

    private void displayPlayerDecks() {
        // Display the cards in the medeck
        System.out.println("Player Deck:");
        for (int i = 0; i < medeck.length; i++) {
            Card card = medeck[i];
            if (card != null) {
                System.out.println("Card " + (i + 1) + ": " + card);
            }
        }
    }

    private void playerTurn() {
        // Implement the game logic for the player's turn here
        // You can use user input to allow the player to draw, stand, or play a card
        // Update the player's board and handle the game outcomes as described
        // Remember to check for bust conditions, board full conditions, and game winner
    }

    // ... (rest of the existing code)
}
} }
class Card {

    public String color;// a string called color
    public int value;// an integer called value

    public Card(String color, int value) { //creates the card object and takes two parameters for it
        this.color = color;
        this.value = value; //these help with referring
    }
  public String getColor() { // this method returns the color
    return color ;
    }

    public int getValue() { // this method returns the value
        return value;
    }
    @Override
    public String toString() {
        return "Card:" + "color:" + color +   ", value=" + value +  '}';



    }
    }

public class Main {
    public static void main(String[] args) {
Deck a = new Deck(); //first deck indicates that i am creating an object from the deck class, a is the name, 
// so by this code you can access the deck class because i created an instance of the deck class.

        // Print all the cards in the deck
        for (int i = 0; i < a.gamedeck.length; i++) {
            Card card = a.gamedeck[i];
            System.out.println("Card " + (i + 1) + ": Color: " + card.ccolor() + ", Value: " + card.vvalue());
        }
 Deck b = new Deck();
        Deck c = new Deck();

        // Print all the cards in the medeck
        for (int i = 0; i < b.medeck.length; i++) {
            Card cardd = b.medeck[i];
if (cardd != null){
            System.out.println("meCard: " + (i + 1) + "color: " + cardd.ccolor() + " value: " + cardd.vvalue());
       }  }

        // Print all the cards in the scarydeck
        for (int i = 0; i < c.scarydeck.length; i++) {
            Card carddd = c.scarydeck[i];
if (carddd != null){
            System.out.println("scaryCard: " + (i + 1) + "color: " + carddd.ccolor() + " value: " + carddd.vvalue());
        }
 }

    }
}









