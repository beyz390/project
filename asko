import java.util.Random;//for shuffling

public class Deck {

    public static int rainbow = 40;//constant of 40 cards
    public Card[] deck;// deck array
    public int currentIndex;
public Card[] medeck;
    public Card[] scarydeck;
 public Card[] scaryhand;
    public Card[] mehand;

    public Deck() { // creates the deck object
        deck = new Card[Colorfulcards]; //creates array deck and fills it with instances of card class.Size of this array is determined by Colorfulcards.
        currentIndex = 0;//firstly it is 0 later to be incremented in drawCard method
        createDeck();//calls the createDeck method
        shuffleasko();//calls the shuffleDeck method
        ptt();
}
 private void deckermakerasko() { //adding colorful to the deck array , adding cards with values for each color
        int size = 0;
        for (int i = 1; i <= 10; i++) {
            deck[size++] = new Card("Green", i,"");
            deck[size++] = new Card("Blue", i,"");
            deck[size++] = new Card("Red", i,"");
            deck[size++] = new Card("Yellow", i,"");
        }
    }

    private void shuffleasko() { //fisher-yates shuffle algorithm
        Random random = new Random();
        for (int i = Colorfulcards - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            Card temp = deck[index];
            deck[index] = deck[i];
            deck[i] = temp;
        }
    }
  public void ptt(){
        shuffleDeck();
        for(int i =0;i<5;i++){
            scarydeck[i]= gamedeck[i];
            
        for (int i = 0; i < 5; i++) {
            medeck[i] = gamedeck[rainbow - 5 + i]; // Distribute the bottom card to medeck
        }
 currentIndex += 10;
        
        
pttthreecards(scarydeck);
pttthreecards(medeck);

    }
public String signsallamaca() {
        String[] signs = {"+", "-"};
        return signs[new Random().nextInt(signs.length)];


    }
      public Card sonikikartyapmaca() {
        Random random = new Random();

        
        int randomInt = random.nextInt(100);
    
        double chance = randomInt / 100.0;
        String[] signs = {"+", "-"};
        if (chance < 0.2) {
            return flipyapmaca(); // 20% chance for a flip card
        } else if (chance < 0.4) {
            return doubleyapmaca(); // 20% chance for a double card
        } else {
            // 80% chance for a signed card with a random color and value
            String color = gamedeck[currentIndex].ccolor(); // Use the color of the current card
            int value = gamedeck[currentIndex].vvalue(); //
             
            Card signedCard = new Card(color, value, ""); // Signed card
            
            return signedCard;


        }
    }
     
      public Card flipyapmaca() {
        return new Card("", 0, "flip"); // Set the sign to "flip"
    }   

 public Card doubleyapmaca() {
        
        return new Card("", 0, "double"); // Set the sign to "double"
    }
 
public Card cardselecting() {
    if (currentIndex >= Colorfulcards) {
        System.out.println("Deck is empty. No cards.");
        return null;
    }

    Card thechosenone = deck[currentIndex];
    currentIndex++;
    return thechosenone;
}


    public boolean isEmpty() { //checks if the deck is empty or not by currentIndex
        return currentIndex >= Colorfulcards;
    }
}
public void pttthreecards(Card[] deck){
        for (int i = 5; i < 8; i++) {
            deck[i] = cardselecting();
            deck[i].setSign(signsallamaca());
        }

        deck[8] = sonikikartyapmaca();
        deck[9] = sonikikartyapmaca();
    }
    public void dealHands() {

            // Shuffle the deck
            shuffleasko();

            // Distribute cards to scary hand from scarydeck
            for (int i = 0; i < 4; i++) {
                scaryhand[i] = scarydeck[i];
            }

            // Distribute cards to me hand from medeck
            for (int i = 0; i < 4; i++) {
                mehand[i] = medeck[i];
            }

            currentIndex += 8; // Reduce the count by 8 since we're dealing 8 cards
        }


    } 
class Card {

    public String color;// a string called color
    public int value;// an integer called value
public String sign;   
public Card(String color, int value,String sign) { //creates the card object and takes two parameters for it
        this.color = color;
        this.value = value; //these help with referring
    this.sign = sign;
}
  public String ccolor() { // this method returns the color
    return color ;
    }

    public int vvalue() { // this method returns the value
        return value;
    }
    @Override
    public String toString() {
        return "Card:" + "color:" + color +   ", value=" + value +  '}';
 public String getSign() {

        return sign;
    }
        // Setter for sign
        public void setSign(String sign) {
            this.sign = sign;
        }


    }




public class Main {
    public static void main(String[] args) {
Deck a = new Deck(); //first deck indicates that i am creating an object from the deck class, a is the name, 
// so by this code you can access the deck class because i created an instance of the deck class.

        // Print all the cards in the deck
        for (int i = 0; i < a.gamedeck.length; i++) {
            Card card = a.gamedeck[i];
            System.out.println("Card " + (i + 1) + ": Color: " + card.ccolor() + ", Value: " + card.vvalue());
        }
 

        // Print all the cards in the medeck
        for (int i = 0; i < a.medeck.length; i++) {
            Card cardd = a.medeck[i];
if (cardd != null){
            System.out.print("meCard " + (i + 1) + ": Color: " + cardd.ccolor() +
                        ", Value: " + cardd.vvalue() + ", Sign: " + cardd.getSign());
if ("flip".equals(cardd.getSign())) {
                    System.out.println(" (Flip Card)");
                } else if ("double".equals(cardd.getSign())) {
                    System.out.println(" (Double Card)");
                }


                System.out.println();
       }  }

        // Print all the cards in the scarydeck
        for (int i = 0; i < a.scarydeck.length; i++) {
            Card carddd = a.scarydeck[i];
if (carddd != null){
            System.out.print("scaryCard " + (i + 1) + ": Color: " + carddd.ccolor() +
                        ", Value: " + carddd.vvalue() + ", Sign: " + carddd.getSign());
      if ("flip".equals(carddd.getSign())) {
                    System.out.println(" (Flip Card)");
                } else if ("double".equals(carddd.getSign())) {
                    System.out.println(" (Double Card)");
                }
                System.out.println();
        }
 }
  Deck u = new Deck();
        u.dealHands();



        // Print me hand
        System.out.println("Me Hand:");
        for (int i = 0; i < u.mehand.length; i++) {
           Card card = u.mehand[i];
System.out.println(card);
        }
System.out.println("Scary Hand:");
for (int i = 0; i < u.scaryhand.length; i++){
        Card card = u.scaryhand[i];
System.out.println(card);
        
    }


    }
}









